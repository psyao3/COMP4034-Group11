
# Changes to testv3


    self.get_depth = False
    self.facing_object = False


    self.depth_sub = rospy.Subscriber('camera/depth/image_raw', Image, depth_callback, (self))


    # ~line 164

    elif self.is_target:

    self.get_depth = True
    while self.get_depth:
        
        self.rate.sleep()


    #self.beacon_to_target()



# additions to callbacks

def depth_callback(data, self):
    '''
    centralises the bounding box on the robot vision and creates a move base goal 
    '''  
    if self.get_depth == True:

        rospy.loginfo ("depth")

        depth_image = self.bridge.imgmsg_to_cv2(data, "passthrough")

        _, w = depth_image.shape # width
        twist = Twist()

        # distance to object
        depth = depth_image[self.goal_y,self.goal_x]
        
        if not self.facing_object:
            rospy.loginfo ("depth: {} ".format(depth))
            if not ((w//2) - (self.box_width/2)  <=  self.goal_x and self.goal_x <= (w//2) + (self.box_width/2)):

                if (self.goal_x > w//2):
            
                    twist.angular.z = -self.angular_speed    
                else:
                    twist.angular.z = self.angular_speed  
                                 
                self.pub.publish(twist)
                self.rate.sleep()
            else:
                self.facing_object = True
        else:


            client = actionlib.SimpleActionClient('move_base', MoveBaseAction)

            while not client.wait_for_server(rospy.Duration.from_sec(5.0)):
                rospy.loginfo("Waiting for the move_base action server")


            goal = MoveBaseGoal()

            # using base_link
            
            goal.target_pose.header.frame_id = "base_link"
            goal.target_pose.header.stamp = rospy.Time.now()

            # set positions of the goal location
            goal.target_pose.pose.position.x = depth -0.3
            goal.target_pose.pose.orientation.w = 1.0


            rospy.loginfo("Sending goal location")
            client.send_goal(goal)

            client.wait_for_result(rospy.Duration(60))
        
            if (client.get_state() ==  GoalStatus.SUCCEEDED):
                rospy.loginfo("You have reached the destination")        
            else:
                rospy.loginfo("The robot failed to reach the destination")


            self.complete.append(self.current_tgt_class)
            self.is_target = False
            self.facing_object = False
            self.depth = False